{"name": "test_back_functionality", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <TestCases.Package_Plant.TC_plant.Test_plant testMethod=test_back_functionality>\n\n    @allure.description(\"Should navigate to pv-plants page Successfully\")\n    @allure.severity(severity_level=\"CRITICAL\")\n    @pytest.mark.order(2_20)\n    def test_back_functionality(self):\n        self.plant = Plant(self.driver)\n>       self.plant.back_functionality()\n\nTestCases/Package_Plant/TC_plant.py:183: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects/plant_module.py:337: in back_functionality\n    if WebDriverWait(self.driver, 50).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"0573377afe2cb9ad22e44783062930ba\")>\nmethod = <function title_contains.<locals>._predicate at 0x7fd058064310>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../../.local/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:95: TimeoutException"}, "description": "Should navigate to pv-plants page Successfully", "start": 1678801239268, "stop": 1678801289565, "uuid": "7e88e37a-ce8f-44a9-9e71-b854e25c23ac", "historyId": "c7e313887215331052bd98bbdbb59891", "testCaseId": "5135114861ef84a619bede3940f81b1c", "fullName": "Test_Suites.test_all_module.Test_plant#test_back_functionality", "labels": [{"name": "severity", "value": "CRITICAL"}, {"name": "tag", "value": "order(220)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "parentSuite", "value": "Test_Suites"}, {"name": "suite", "value": "test_all_module"}, {"name": "subSuite", "value": "Test_plant"}, {"name": "host", "value": "sujith-HP-Compaq-Elite-8300-SFF"}, {"name": "thread", "value": "27332-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.test_all_module"}]}