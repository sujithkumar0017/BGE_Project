{"name": "test_search_option_listView", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a id=\"search-category\" href=\"#search\" class=\"btn btn-icon search-toggle toggle-search\">...</a> is not clickable at point (1776, 215). Other element would receive the click: <div class=\"modal fade show\" role=\"dialog\" tabindex=\"-1\" style=\"display: block;\">...</div>\n  (Session info: chrome=110.0.5481.177)\nStacktrace:\n#0 0x55b5ebf20d93 <unknown>\n#1 0x55b5ebcef2d7 <unknown>\n#2 0x55b5ebd32565 <unknown>\n#3 0x55b5ebd305a2 <unknown>\n#4 0x55b5ebd2e0ce <unknown>\n#5 0x55b5ebd2d26d <unknown>\n#6 0x55b5ebd20ff5 <unknown>\n#7 0x55b5ebd4f5f2 <unknown>\n#8 0x55b5ebd20873 <unknown>\n#9 0x55b5ebd4f81e <unknown>\n#10 0x55b5ebd67619 <unknown>\n#11 0x55b5ebd4f353 <unknown>\n#12 0x55b5ebd1ee40 <unknown>\n#13 0x55b5ebd20038 <unknown>\n#14 0x55b5ebf748be <unknown>\n#15 0x55b5ebf788f0 <unknown>\n#16 0x55b5ebf58f90 <unknown>\n#17 0x55b5ebf79b7d <unknown>\n#18 0x55b5ebf4a578 <unknown>\n#19 0x55b5ebf9e348 <unknown>\n#20 0x55b5ebf9e4d6 <unknown>\n#21 0x55b5ebfb8341 <unknown>\n#22 0x7f770a294b43 <unknown>", "trace": "self = <TestCases.Package_entity_management.TC_asset_category.Test_Asset_Category testMethod=test_search_option_listView>\n\n    @allure.description(\"Should able to search asset using search functionality\")\n    @allure.severity(severity_level=\"CRITICAL\")\n    @pytest.mark.order(6_11)\n    def test_search_option_listView(self):\n        self.asset_category = asset_category(self.driver)\n>       self.asset_category.search_functionality(\"Asset Category 500\")\n\nTestCases/Package_entity_management/TC_asset_category.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npage_objects/entity_Management/asset_category.py:175: in search_functionality\n    self.driver.find_element(By.XPATH,'//a[@href=\"#search\"]').click()\n../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:410: in _execute\n    return self._parent.execute(command, params)\n../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fd05921aec0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x55b5ebf9e4d6 \\\\u003Cunknown>\\\\n#21 0x55b5ebfb8341 \\\\u003Cunknown>\\\\n#22 0x7f770a294b43 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a id=\"search-category\" href=\"#search\" class=\"btn btn-icon search-toggle toggle-search\">...</a> is not clickable at point (1776, 215). Other element would receive the click: <div class=\"modal fade show\" role=\"dialog\" tabindex=\"-1\" style=\"display: block;\">...</div>\nE         (Session info: chrome=110.0.5481.177)\nE       Stacktrace:\nE       #0 0x55b5ebf20d93 <unknown>\nE       #1 0x55b5ebcef2d7 <unknown>\nE       #2 0x55b5ebd32565 <unknown>\nE       #3 0x55b5ebd305a2 <unknown>\nE       #4 0x55b5ebd2e0ce <unknown>\nE       #5 0x55b5ebd2d26d <unknown>\nE       #6 0x55b5ebd20ff5 <unknown>\nE       #7 0x55b5ebd4f5f2 <unknown>\nE       #8 0x55b5ebd20873 <unknown>\nE       #9 0x55b5ebd4f81e <unknown>\nE       #10 0x55b5ebd67619 <unknown>\nE       #11 0x55b5ebd4f353 <unknown>\nE       #12 0x55b5ebd1ee40 <unknown>\nE       #13 0x55b5ebd20038 <unknown>\nE       #14 0x55b5ebf748be <unknown>\nE       #15 0x55b5ebf788f0 <unknown>\nE       #16 0x55b5ebf58f90 <unknown>\nE       #17 0x55b5ebf79b7d <unknown>\nE       #18 0x55b5ebf4a578 <unknown>\nE       #19 0x55b5ebf9e348 <unknown>\nE       #20 0x55b5ebf9e4d6 <unknown>\nE       #21 0x55b5ebfb8341 <unknown>\nE       #22 0x7f770a294b43 <unknown>\n\n../../.local/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:249: ElementClickInterceptedException"}, "description": "Should able to search asset using search functionality", "start": 1678801505082, "stop": 1678801506171, "uuid": "4cba5c99-c5c1-4083-81d8-7d4f15a308a7", "historyId": "51f6a811839a07f4171a060c43c7e5fa", "testCaseId": "b75d7721f3924d50d4b5a83ad0853565", "fullName": "Test_Suites.test_all_module.Test_Asset_Category#test_search_option_listView", "labels": [{"name": "severity", "value": "CRITICAL"}, {"name": "tag", "value": "order(611)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "parentSuite", "value": "Test_Suites"}, {"name": "suite", "value": "test_all_module"}, {"name": "subSuite", "value": "Test_Asset_Category"}, {"name": "host", "value": "sujith-HP-Compaq-Elite-8300-SFF"}, {"name": "thread", "value": "27332-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.test_all_module"}]}