{"name": "test_create_corrective_ticket_plant_name_were_displayed", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <TestCases.Package_Plant.TC_plant.Test_plant testMethod=test_create_corrective_ticket_plant_name_were_displayed>\n\n    @allure.description(\"Should display the created plant name on the plant name which is non-editable field successfully\")\n    @allure.severity(severity_level=\"CRITICAL\")\n    @pytest.mark.order(2_12)\n    def test_create_corrective_ticket_plant_name_were_displayed(self):\n        self.plant = Plant(self.driver)\n>       self.plant.validate_plant_name_in_create_corrective_ticket(\"Plant_Diamond\")\n\nTestCases/Package_Plant/TC_plant.py:117: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <page_objects.plant_module.Plant object at 0x7fd057fdf400>, plant_name = 'Plant_Diamond'\n\n    def validate_plant_name_in_create_corrective_ticket(self, plant_name):\n        element = self.driver.find_element(\n            By.XPATH,\n            \"(//div[contains(@class,'react-select__control react-select__control--is-disabled css-1fhf3k1-control')])[4]\",\n        )\n        #    value = element.get_attribute(\"value\")\n    \n        actions = ActionChains(self.driver)\n        actions.double_click(element)\n        actions.key_down(Keys.CONTROL).send_keys(\"a\").key_up(Keys.CONTROL).perform()\n        if element.text == plant_name:\n            assert True\n        else:\n            allure.attach(self.driver.get_screenshot_as_png(),name=\"Plant_name_in_create_remedial\",attachment_type=AttachmentType.PNG)\n            # self.driver.save_screenshot(\"Plant_name_in_create_remedial.png\")\n>           assert False\nE           AssertionError\n\npage_objects/plant_module.py:296: AssertionError"}, "description": "Should display the created plant name on the plant name which is non-editable field successfully", "attachments": [{"name": "Plant_name_in_create_remedial", "source": "1fe386e6-86f0-48d1-b612-faf9b78c9c38-attachment.png", "type": "image/png"}], "start": 1678801201357, "stop": 1678801202999, "uuid": "927c4851-d7c3-4449-ba36-55ebbfd1a2c4", "historyId": "4fe474e61b0860d1d5cfc7b405508eb0", "testCaseId": "c0baf25c3d6f26c46697912664a5586c", "fullName": "Test_Suites.test_all_module.Test_plant#test_create_corrective_ticket_plant_name_were_displayed", "labels": [{"name": "severity", "value": "CRITICAL"}, {"name": "tag", "value": "order(212)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('init_driver')"}, {"name": "parentSuite", "value": "Test_Suites"}, {"name": "suite", "value": "test_all_module"}, {"name": "subSuite", "value": "Test_plant"}, {"name": "host", "value": "sujith-HP-Compaq-Elite-8300-SFF"}, {"name": "thread", "value": "27332-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Suites.test_all_module"}]}